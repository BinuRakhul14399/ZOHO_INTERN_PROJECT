import java.io.*;
import java.util.Properties;
import java.io.IOException; 
import java.nio.file.*; 
import java.util.*;
import java.lang.*;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;  
import com.itextpdf.text.*;  
import com.itextpdf.text.Document;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class Projectrole
{ 
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	public static int userID=1;
	boolean exitMainProg = false;
	public static void main(String args[]) throws IOException
       {  
	      
          Projectrole callfn = new Projectrole();
		  callfn.rolecreate();
		  callfn.filecreate();
		  callfn.mainProg();

       }
	
	public void rolecreate() throws IOException
       {
		  try
		   {   
		      
		      File roleFile =new File("role.txt");
			  roleFile.createNewFile();
              
			  if(roleFile.length()==0)
			  {
			   PrintWriter fw = new PrintWriter(new BufferedWriter(new FileWriter("role.txt")));  
              fw.write("1001 admin USER-CREATION,USER-DELETION,READ,WRITE,VIEW_AUDIT-LOGS,CREATE-PDF,SEND-MAIL,SIGNOUT\r\n");    
			  fw.write("1002 user FILE-OPERATION,SIGNOUT");  
              fw.close();   
			  }
          }
		  catch(Exception e)
		  {
			  System.out.println(e);
		  }     
	   }   
	   
	   
	   
	   public void filecreate() throws IOException
       {
		  try
		   {   
              File userFile =new File("users.txt");
			  userFile.createNewFile();
              
			  if(userFile.length()==0)
			  {		   
              PrintWriter fw = new PrintWriter(new BufferedWriter(new FileWriter("users.txt")));    
              fw.write("1 admin admin 1001 READ/WRITE\r\n");    
              fw.close(); 
              }			  
          }
		  catch(Exception e)
		  {
			  System.out.println(e);
		  }     
	   }  
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   public void auditcreate(String auditUser,int auditFile ) throws IOException
       {
		  try
		   {  
      		   DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
               LocalDateTime now = LocalDateTime.now();  
              File userFile =new File("audit.txt");
			  userFile.createNewFile();
			   Writer addaudit;
               addaudit = new BufferedWriter(new FileWriter("audit.txt",true));
			  if(auditFile==5)
			  {    
              addaudit.write(auditUser+" Logged-in "+dtf.format(now)+"\r\n");     
			  }
			   if(auditFile==6)
			  {    
              addaudit.write(auditUser+" Created_an_User "+dtf.format(now)+"\r\n");     
			  }
			   if(auditFile==7)
			  {    
              addaudit.write(auditUser+" Deleted_an_User "+dtf.format(now)+"\r\n");     
			  }
			   if(auditFile==8)
			  {    
              addaudit.write(auditUser+" viewed_files "+dtf.format(now)+"\r\n");     
			  }
			   if(auditFile==9)
			  {    
              addaudit.write(auditUser+" Modified_files "+dtf.format(now)+"\r\n");     
			  }
			  if(auditFile==11)
			  {    
              addaudit.write(auditUser+" Viewed_Audit-Logs "+dtf.format(now)+"\r\n");   		  
			  }
			  if(auditFile==12)
			  {    
              addaudit.write(auditUser+" Created_PDF "+dtf.format(now)+"\r\n");   		  
			  }
			  
			  if(auditFile==13)
			  {    
              addaudit.write(auditUser+" Sent_MAIL "+dtf.format(now)+"\r\n");   		  
			  }
			  
			  if(auditFile==10)
			  {    
              addaudit.write(auditUser+" Signed_out "+dtf.format(now)+"\r\n");   				  
			  }
				  		  
				  
			  if(auditFile==1)
			  {    
              addaudit.write(auditUser+" Logged-in "+dtf.format(now)+"\r\n");     
			  }
			  if(auditFile==2)
			  {    
              addaudit.write(auditUser+" viewed_files "+dtf.format(now)+"\r\n");    
              
			  }
			  if(auditFile==3)
			  {    
              addaudit.write(auditUser+" Modified_files "+dtf.format(now)+"\r\n");    
              
			  }
			  if(auditFile==4)
			  {    
              addaudit.write(auditUser+" Signed_out "+dtf.format(now)+"\r\n");   			  
              
			  }
             addaudit.close();  		  
          }
		  catch(Exception e)
		  {
			  System.out.println(e);
		  }     
	   }  
	   
	   
	   
	   
	   
	   
	   
	   
	   
       


       public void mainProg() throws IOException
       {   
	       exitMainProg = false;
	       Scanner in = new Scanner(System.in);
		   System.out.println("******************* Welcome*************************");
           System.out.println("----Make your choice----\n\n1.Sign in\t2.Exit");
           int choice= in.nextInt(); 
           switch(choice)
              {
                 case 1:
          	        {   
					    int pass=0;
                        System.out.println("\n=================Signing in====================\n");
                        System.out.println("\nEnter your username:");
                        String username = br.readLine(); 
                        System.out.println("Enter your password:");
                        String password = br.readLine(); 
						BufferedReader Buff = new BufferedReader(new FileReader("users.txt"));
						String fileLine1 = Buff.readLine();
						
						String[] splitWordUser = fileLine1.split(" ",0);
						if(splitWordUser[1].equals(username)==true)
						{
							if(splitWordUser[2].equals(password)==true)
							{   
						        auditcreate(splitWordUser[1],5);
								System.out.println("\nWelcome!!..Signin Success..You are an admin!!!!!\n\n");
								pass=1;
								BufferedReader Buffrole = new BufferedReader(new FileReader("role.txt"));
								String roleLine = Buffrole.readLine();
								Buff.close();
								while (roleLine != null) 
								       {
				                           String[] splitWordRole = roleLine.split(" ",0);
										   if(splitWordRole[0].equals(splitWordUser[3])==true)
										   {
											   do
											   {
											   System.out.println(splitWordRole[2]);
											   
											   dispoption();
											   switchOption();
											   }while (!exitMainProg);
											   break;
										   }
										   
				                           roleLine = Buffrole.readLine();
			                           }
			                         Buffrole.close();
								
								
							}
							break;
						}
						
						while(fileLine1 != null)
						{
							String[] splitWord1 = fileLine1.split(" ",0);
							if(splitWord1[1].equals(username)==true)
							{
								if(splitWord1[2].equals(password)==true)
								{    
							         auditcreate(splitWord1[1],1);
									System.out.println("Welcome!!..Signin Success..You are an user!!!!!");
									pass=1;
										userDispoption();
										userSwitchOption();
										do{
										if(username.equals(splitWord1[1])==true&&splitWord1[4].equals("READ")==true)
										{   
									        auditcreate(splitWord1[1],2);
											viewFiles();
											userDispoption();
										    userSwitchOption();
										}
									    if(username.equals(splitWord1[1])==true&&splitWord1[4].equals("WRITE")==true)
										{   
									        auditcreate(splitWord1[1],3);
											modifyFiles(); 
											userDispoption();
										    userSwitchOption();
										}
										}while(true);
								}
							
							}
							fileLine1 = Buff.readLine();
						}
						if(pass==0)
						{
							System.out.println("Sorry!!..Either the Username or Password is incorrect. Please try again..");
							mainProg();
						}
						break;
					}
					
					
					case 2:
					{
						
						System.out.println("See You Later...BYE!! :( ");
						System.exit(0);
					}
              }					
						
       }	




       public void dispoption() throws IOException
       {
            BufferedReader Buffrole = new BufferedReader(new FileReader("role.txt"));
			String roleLine = Buffrole.readLine();
			String[] splitWordRole = roleLine.split(" ",0);
			String[] splitWordRole1 = splitWordRole[2].split(",",0);
            System.out.println("==========================="); 
				for(String name :splitWordRole1 )
			{
				if(name.equals("USER-CREATION")==true)
		          {
		   	           System.out.println("1. Create an user "); 
		          }
		        if(name.equals("USER-DELETION")==true)
		          {
		   	           System.out.println("2.Delete an user ");
		          }
		        if(name.equals("READ")==true)
		          {
		   	           System.out.println("3.View files  ");
		          }
		        if(name.equals("WRITE")==true)
		          {
		   	           System.out.println("4.Rename or delete a file  ");
		          }  
				  if(name.equals("VIEW_AUDIT-LOGS")==true)
		          {
		   	           System.out.println("5.View Audit-Logs ");
		          } 
                  if(name.equals("CREATE-PDF")==true)
		          {
		   	           System.out.println("6.Create pdf ");
		          }    
                  if(name.equals("SEND-MAIL")==true)
		          {
		   	           System.out.println("7.Send E-Mail ");
		          }                                     				  
		        if(name.equals("SIGNOUT")==true)
		          {
		   	           System.out.println("8.Signout ");
		          }                   
				  
			}
			System.out.println("==========================="); 
			Buffrole.close();
	   }
	   
	   
	   
	   public void userDispoption() throws IOException
       {
            BufferedReader Buffrole = new BufferedReader(new FileReader("role.txt"));
			String roleLine = Buffrole.readLine();
			roleLine = Buffrole.readLine();
			String[] splitWordRole = roleLine.split(" ",0);
			String[] splitWordRole1 = splitWordRole[2].split(",",0);
            System.out.println("==========================="); 
				for(String name :splitWordRole1 )
			{
				if(name.equals("FILE-OPERATION")==true)
		          {
		   	           System.out.println("1. File Operation "); 
		          }
		        if(name.equals("SIGNOUT")==true)
		          {
		   	           System.out.println("2.Sign out ");
		          }
		        
			}
			System.out.println("==========================="); 
			Buffrole.close();
	   }
	   
	   
	   
	  
      public void switchOption() throws IOException
       {   
	       Scanner in = new Scanner(System.in);
           System.out.println("\nPlease choose any option..\n");
		   int switchingOpt= in.nextInt(); 
		   BufferedReader Buffrole = new BufferedReader(new FileReader("role.txt"));
		   String roleLine = Buffrole.readLine();
		   String[] splitWordRole = roleLine.split(" ",0);
		   String[] splitWordRole1 = splitWordRole[2].split(",",0);
           switch(switchingOpt)
                {

                   case 1:
          	          { 
					  int dummy=1;
          	          if(splitWordRole1[0].equals("USER-CREATION")==true)
		                 { 
					       auditcreate("Admin",6);
		                   createUser();
		                   dummy++;
                      
                         }
                      if(dummy==1)
          	             {   
					         
				             System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				             break;
				   
				         }
				           break;
                       }
                   case 2: 
                      { 
					  int dummy=1;
                      if(splitWordRole1[1].equals("USER-DELETION")==true)
		                 {
							auditcreate("Admin",7);  
                            deleteUser();
                            dummy++;
                   
                         }
                      if(dummy==1)
          	             {
				             System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
				           break;
                      }
                   case 3: 
                      { 
					  int dummy=1;  
            	      if(splitWordRole1[2].equals("READ")==true)
		                 { 
					       auditcreate("Admin",8);
                           viewFiles();
                           dummy++;
                    
                         }
                      if(dummy==1)
          	             {
				            System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
                            break;
                      }
                   case 4:
          	          {  
					  int dummy=1;  
          		      if(splitWordRole1[3].equals("WRITE")==true)
		                 {
						  auditcreate("Admin",9);	  
          	              modifyFiles();
          	              dummy++;
          	    
          	             }
          	          if(dummy==1)
          	             {
				            System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
				            break;
          	          }
					  
					  
					  
					  case 5:
          	          {  
					  int dummy=1;  
          		      if(splitWordRole1[4].equals("VIEW_AUDIT-LOGS")==true)
		                 {
						  	  
          	              auditLogs();
						  auditcreate("Admin",11);
          	              dummy++;
          	    
          	             }
          	          if(dummy==1)
          	             {
				            System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
				            break;
          	          }
					  
					  case 6:
          	          {  
					  int dummy=1;  
          		      if(splitWordRole1[5].equals("CREATE-PDF")==true)
		                 {
						  auditcreate("Admin",12);	  
          	              createpdf();
						  
          	              dummy++;
          	    
          	             }
          	          if(dummy==1)
          	             {
				            System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
				            break;
          	          }
					  
					  case 7:
          	          {  
					  int dummy=1;  
          		      if(splitWordRole1[6].equals("SEND-MAIL")==true)
		                 {
						  auditcreate("Admin",13);	  
          	              sendEMail();
						  
          	              dummy++;
          	    
          	             }
          	          if(dummy==1)
          	             {
				            System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
				            break;
          	          }
					  
					  
					  
					  
					  
          
                   case 8:
                      {  
					  int dummy=1; 
          	          if(splitWordRole1[7].equals("SIGNOUT")==true)
		                 {
			                System.out.println("Signing out from admin..please wait");
                            exitMainProg = true;
                            System.out.println("Admin signed out successfully!!bye..");
							auditcreate("Admin",10);
                            mainProg();
                            dummy++;
                    
                         }
                      if(dummy==1)
                         {
				            System.out.println("This Option doesnt exist for admin..Please choose any other option !!!");
				            break;
				         }
				            break;
                      }
                  default :
                           System.out.println("Please enter one of the options above only");
                           break;
                }
	   Buffrole.close();
	   }



         public void userSwitchOption() throws IOException
       {   
	       Scanner in = new Scanner(System.in);
           System.out.println("\nPlease choose any option..\n");
		   int switchingOpt= in.nextInt(); 
		   BufferedReader Buffrole = new BufferedReader(new FileReader("role.txt"));
		   String roleLine = Buffrole.readLine();
		   roleLine = Buffrole.readLine();
		   String[] splitWordRole = roleLine.split(" ",0);
		   String[] splitWordRole1 = splitWordRole[2].split(",",0);
           switch(switchingOpt)
                {

                   case 1:
          	          { 
					  int dummy=1;
          	          if(splitWordRole1[0].equals("FILE-OPERATION")==true)
		                 {
		                   
		                   dummy++;
						   return;
                      
                         }
                      if(dummy==1)
          	             {
				             System.out.println("This Option doesnt exist for user..Please choose any other option !!!");
				             break;
				   
				         }
				           break;
                       }
                   case 2: 
                      { 
					  int dummy=1;
                      if(splitWordRole1[1].equals("SIGNOUT")==true)
		                 {
                            System.out.println("Signing out from user...Please wait!!!");  
				            System.out.println("\nSigned Out Successfully...Bye :(\n"); 
							auditcreate("User",4);
                            mainProg();
                            dummy++;
                   
                         }
                      if(dummy==1)
          	             {
				             System.out.println("This Option doesnt exist for user..Please choose any other option !!!");
				            break;
				         }
				           break;
                      }
                }

	   }






      public void createUser() throws IOException
        { 
		    System.out.println("********Creating an User*********\n");
            System.out.println("Enter username :");
            String userName = br.readLine();
            String userPass	;	
            String userRepass;
			int jump=0;
			
            do
    	     {
    		
                System.out.println("Enter the password :");
                userPass = br.readLine(); 
                System.out.println("Re-Enter the password :");
                userRepass = br.readLine(); 
				BufferedReader Buff = new BufferedReader(new FileReader("users.txt"));
				String userCheck = Buff.readLine();
				while (userCheck != null) 
								       {
										   
				                           String[] splituserCheck = userCheck.split(" ",0);
										   if(splituserCheck[1].equals(userName)==true)
										   {
											   System.out.println("User already exist..please try again!!!\n\n\n");
											   jump=1;
											   return;
										   }
										   userCheck = Buff.readLine();
										   
			                           }
									    Buff.close();
									   if(jump==0)
										   {   


											   userID++;
											   int id = 1002;
											   Writer addUser;
                                               addUser = new BufferedWriter(new FileWriter("users.txt",true));
											   addUser.append(userID+" "+userName+" "+userPass+" "+id+" ");
                                               addUser.close();
										   }
										if(userPass.equals(userRepass)==true)
    
		                                  {
			                                   System.out.println("User created successfully");
		                                  }
	                                    else
                                          {
       	
                                               System.out.println("password re-enterred did not match");
	                                      }   
			                        
				
			 }while(userPass.equals(userRepass)!=true);
			    Scanner in = new Scanner(System.in);
			    BufferedReader Buff1 = new BufferedReader(new FileReader("users.txt"));
				System.out.println("What access you need to give the user---\t 1.Read\t2.Write");
				int access= in.nextInt(); 
				if(access==1)
				{
					Writer addUserPermission;
                    addUserPermission = new BufferedWriter(new FileWriter("users.txt",true));
					addUserPermission.append("READ\r\n");
					addUserPermission.close();
					System.out.println("READ permission assigned to the user successfully!!!!");
					addUserPermission.close();
					
				}
				
				if(access==2)
				{
					Writer addUserPermission;
                    addUserPermission = new BufferedWriter(new FileWriter("users.txt",true));
					addUserPermission.append("WRITE\r\n");
					addUserPermission.close();
					System.out.println("WRITE permission assigned to the user successfully!!!!");
					addUserPermission.close();
				}
				Buff1.close();
		}





       public void deleteUser() throws IOException
        {    


				File inputFile = new File("users.txt");
                 File tempFile = new File("myTempFile.txt");

                 BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                 BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
				 BufferedReader Buff = new BufferedReader(new FileReader(inputFile));
				 String st; 
				 int num=0;
                 while ((st = Buff.readLine()) != null)
				 {					 
                 System.out.println("order no-"+num+"->"+st); 
				 num++;
				 }
			     Scanner in = new Scanner(System.in);
                 System.out.println("Enter the Order ID of the user you want to delete :");
				 int removeLine1= in.nextInt(); 
				 String lineToRemove=Files.readAllLines(Paths.get("users.txt")).get(removeLine1);
                 String currentLine;

                  while((currentLine = reader.readLine()) != null) 
				  {
                       String trimmedLine = currentLine.trim();
                       if(trimmedLine.equals(lineToRemove)) continue;
                       writer.write(currentLine + System.getProperty("line.separator"));
                  }
				  Buff.close();
                  writer.close(); 
                  reader.close(); 
                  boolean successful = inputFile.delete();
                  boolean successful1 = tempFile.renameTo(inputFile);
				  System.out.println("The user DELETED successfully");
        
		}
		
	   

       public void viewFiles() throws IOException
        {
            
        int siNo=0;
        System.out.println("Enter the driectory..for ex(C:\\) to view :");
	    String dirPath = br.readLine(); 
        File file = new File(dirPath);
        File[] files = file.listFiles();
        for(File f: files){
            System.out.println(siNo+"-"+f.getName());
            siNo++;
        }
  		
        }	



       public void modifyFiles() throws IOException
        {
            Scanner in = new Scanner(System.in); 
  
        int siNo=0,count=0;
        System.out.println("Enter the driectory..for ex(C:\\) to view :");
	    String dirPath = br.readLine(); 
        File file = new File(dirPath);
        File[] files = file.listFiles();
        for(File f: files){
            System.out.println(siNo+"-"+f.getName());
            siNo++;
        }
        System.out.println("Enter the serial number of the file :");
        int selectNo= in.nextInt(); 
   
        for(File f: files){
            count++;
            if(selectNo==(count-1))
            {   
                System.out.println("======choose any option======\n 1.delete \t 2.rename\n");
	            int option= in.nextInt(); 
	        switch (option)
	        {
	        	case 1:
	        		{ 
                String delFile = (dirPath + f.getName() );
                try
                   {
                        boolean result=Files.deleteIfExists(Paths.get(delFile)); 
						if(result==true)
                            {				
                                System.out.println("\nThe file deleted successfully\n");
				            }
						else
						{
							System.out.println("\nThe file is being used by another application\n");
						}							
						
                   }
                catch(DirectoryNotEmptyException e) 
                   {    
				        
                        System.out.println("Directory is not empty"); 
                   } 
                catch(IOException e) 
                   { 
                        System.out.println("Invalid permission"); 
                   } 
				
				break;
                    }
				case 2:
				   {
					String renameFile = (dirPath + f.getName() );
                    System.out.println("Enter the new filename:\n");
	                String newFilename =br.readLine(); 					
					File oldName = new File(renameFile); 
                    File newName = new File(dirPath + newFilename); 
  
                    if (oldName.renameTo(newName))  
                        System.out.println("\nThe file renamed successfully\n");         
                    else 
                        System.out.println("\nRename unsuccessfull..The file is being used by another application\n");         
					
				   }				
            }
           
        }


      }
         
		}	


     public void auditLogs() throws IOException
        {
			 	File inputFile = new File("audit.txt");

                 BufferedReader Buff = new BufferedReader(new FileReader(inputFile));
				
				 String st; 
                while ((st = Buff.readLine()) != null)
				 {					 
                 System.out.println(st); 
				 }
			
		}
		
		
		
		
		
		public void createpdf() throws IOException
        {

						
			     
                 File inputFile = new File("audit.txt");
                 BufferedReader Buff = new BufferedReader(new FileReader(inputFile));
				 String fileLineAudit = Buff.readLine();
				 String key = "";
				 String key1 = "";
				 String key2 = "";
				 String key3 = "";
				 String k="\n";
				 
				 int a=2;
				 
				 while(fileLineAudit != null)
						{
							
				  String[] splitWordAudit = fileLineAudit.split(" ",0);
                         key =key+splitWordAudit[0]+k;
						 key1 =key1+splitWordAudit[1]+k;
						 key2 =key2+splitWordAudit[2]+k;
						 key3 =key3+splitWordAudit[3]+k;
						 fileLineAudit = Buff.readLine();
						}
                         

				 Document doc = new Document(PageSize.A4);
			
			try{
				PdfWriter.getInstance(doc, new FileOutputStream("audit.pdf"));
				doc.open();
				doc.add(new Paragraph("AUDIT LOG",FontFactory.getFont(FontFactory.TIMES_BOLD,18,Font.BOLD,BaseColor.RED)));
				doc.add(new Paragraph(new Date().toString()));
				doc.add(new Paragraph("---------------------------------------------------------------------------------------------------------------"));
                PdfPTable table = new PdfPTable(4);
				table.setWidthPercentage(100);
				table.addCell("NAME");
				table.addCell("EVENT");
				table.addCell("DATE");
				table.addCell("TIME");
				table.addCell(key);
				table.addCell(key1);
				table.addCell(key2);
				table.addCell(key3);
				doc.add(table);
				 doc.close();
				 
			}
			
			catch(Exception e){
				System.out.println(e);
			}
			
	
						
						System.out.println("The PDF is created Successfully....");
				 
		}
		
		
		
		
		
	public void sendEMail() throws IOException
        {
			
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class",
                "javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", "465");

      Session session = Session.getInstance(props,
         new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
               return new PasswordAuthentication("binurakhulmdu@gmail.com", "vishnu14399@9");
            }
         });

      try {
		  System.out.println("Enter the mail id of the recipient :");
		  String recipient = br.readLine(); 
         Message message = new MimeMessage(session);
         message.setFrom(new InternetAddress("binurakhulmdu@gmail.com"));
         message.setRecipients(Message.RecipientType.TO,
           InternetAddress.parse(recipient));
         message.setSubject("AUDIT LOG");
         BodyPart messageBodyPart = new MimeBodyPart();
         messageBodyPart.setText("File for your reference");
         Multipart multipart = new MimeMultipart();
         multipart.addBodyPart(messageBodyPart);
         messageBodyPart = new MimeBodyPart();
         String filename = "audit.pdf";
         DataSource source = new FileDataSource(filename);
         messageBodyPart.setDataHandler(new DataHandler(source));
         messageBodyPart.setFileName(filename);
         multipart.addBodyPart(messageBodyPart);
         message.setContent(multipart);
         Transport.send(message);
         System.out.println("Mail Sent successfully....");
  
      } catch (MessagingException e) {
         throw new RuntimeException(e);
      }


        }			
		
		
		
		




		
      	   
}